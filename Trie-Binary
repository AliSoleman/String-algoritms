	  const int CHAR = 2;
	const int LOG = 32;
	ll ans ;
	struct trie
	{
	    trie* child[2];
	    
	    int cnt, val;
	    
	    trie()
	    {
	        memset(child, 0, sizeof child);
	        cnt = 0;
	    }
	    
	    ~trie()
	    {
	        if(child[0])delete child[0];
        if(child[1])delete child[1];
	    }
	    
	    void insert(int x,int i = LOG-1)
	    {
	        cnt++;
	        if (i == -1) return;
	        int cur = (x&(1ll<<i)) > 0;
	        if (child[cur] == 0) child[cur] = new trie();
	        child[cur]->insert(x,i-1);
	    }
	    
	    void erase(int x,int i = LOG-1)
	    {
	        cnt--;
	        if (i == -1) return;
	 
	        int cur = (x&(1ll<<i)) > 0;
	        child[cur]->erase(x,i-1);
	        if (child[cur]->cnt == 0)
	        {
	            delete child[cur];
	            child[cur] = 0;
	        }
	        return;
	    }
	    
	    void getMax(int x, int i = LOG-1)
	    {
	        if(i == -1)return;
	        int cur = (x & (1ll << i)) > 0;
	 
	        if(child[!cur])
	        {
	            ans |= (1ll << i);
	            child[!cur]->getMax(x, i-1);
	        }
	        else
	        {
	            child[cur]->getMax(x, i-1);
	        }
	    }
	    
	    int GetMin (int x, int i = LOG-1)
	    {
	        if (i == -1) return val;
	        int cur = (x >> i) & 1ll ;
	        if (child[cur] == NULL) cur^=1 ;
	        return child[cur]->GetMin(x, i - 1) ;
	    }
	 
	    int cntSmallerThan(int x,int i = LOG-1)
	    {
	        if (i == -1) return 0;
	 
	        int cur = (x&(1ll<<i)) > 0;
	        int ret = 0;
	        if (cur)
	        {
	            ret += child[0] ? child[0]->cnt:0;
	            ret += child[1] ? child[1]->cntSmallerThan(x,i-1):0;
	        }
	        else if (!cur)
	        {
	            ret += child[0] ? child[0]->cntSmallerThan(x,i-1):0;
	        }
	        return ret;
	    }
	    /// count how many a such that p^a < x
	    void cntLess(int p, int x, int i = LOG - 1){
	        if(i == -1)return;
	        int cur = (p & (1ll << i)) > 0,
	            bt = (x & (1ll << i)) > 0;
	 
	        if(bt){
	            if(child[cur])
	                ans += child[cur]->cnt;
	            if(child[!cur])
	                child[!cur]->cntLess(p, x, i-1);
	        }
	        else{
	            if(child[cur])
	                child[cur]->cntLess(p, x, i-1);
	        }
	    }
	 
	    int kth(int k,int i = LOG-1)
	    {
	        if (k >= cnt) return -1;
	        if (i == -1) return 0;
	 
	        int cnt0 = child[0] ? child[0]->cnt:0;
	 
	        if (k < cnt0) return child[0]->kth(k,i-1);
	        return child[1]->kth(k-cnt0,i-1) + (1<<i);
	    }
 
	};
